{"version":3,"sources":["pages/View/Section1.js","../node_modules/react-query/es/core/queryObserver.js","../node_modules/react-query/es/react/QueryErrorResetBoundary.js","../node_modules/react-query/es/react/useBaseQuery.js","../node_modules/react-query/es/react/useQuery.js"],"names":["useStyles","makeStyles","button","margin","zIndex","color","borderColor","marginTop","height","button2","Section1","useQuery","fetch","then","res","json","isLoading","error","data","message","AOS","init","duration","Fragment","id","className","data-aos","name","founded","founder","QueryObserver","_Subscribable","client","options","_this","call","this","trackedProps","bindMethods","setOptions","_inheritsLoose","_proto","prototype","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","query","enabled","refetchOnReconnect","isStale","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearTimers","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryObserverOptions","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","defaultedOptions","getQueryCache","build","createResult","getCurrentResult","currentResult","trackResult","result","_this2","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","typedKey","includes","push","getNextResult","_this3","Promise","resolve","reject","unsubscribe","subscribe","isFetching","isError","throwOnError","getCurrentQuery","fetchOptimistic","_this4","fetchOptions","_this5","promise","catch","noop","_this6","clearStaleTimeout","isServer","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this7","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","placeholderData","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","status","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","dataUpdateCount","isSuccess","select","structuralSharing","replaceEqualDeep","selectError","getLogger","Date","now","isIdle","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","_this$options","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","some","changed","isIncluded","x","isExcluded","shallowEqualObjects","defaultNotifyOptions","cache","notify","_extends","onQueryUpdate","action","type","onSuccess","onError","_this8","notifyManager","batch","onSettled","listener","Subscribable","retryOnMount","shouldLoadOnMount","refetchOnMount","shouldRefetchOnMount","isStaleByTime","createValue","_isReset","clearReset","reset","isReset","QueryErrorResetBoundaryContext","React","createContext","useBaseQuery","Observer","mountedRef","useRef","forceUpdate","useState","queryClient","useQueryClient","errorResetBoundary","useContext","batchCalls","suspense","useErrorBoundary","obsRef","current","useEffect","_ref","arg1","arg2","arg3","parseQueryArgs"],"mappings":"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","file":"static/js/7.ba53ee37.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport AOS from 'aos';\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n      margin: '0.1em',\r\n      zIndex: 999999999999,\r\n      color: 'white',\r\n      borderColor: 'white',\r\n      marginTop: '2vh',\r\n      height: '6vh'\r\n    },\r\n    button2: {\r\n        margin: '0.1em',\r\n        zIndex: 999999999999,\r\n        color: 'white',\r\n        borderColor: 'white',\r\n    },\r\n  });\r\n\r\n\r\nconst Section1 = () => {\r\n    const classes = useStyles();\r\n    const { isLoading, error, data } = useQuery('repoData', () =>\r\n        fetch('https://api.spacexdata.com/v3/info').then(res =>\r\n            res.json()\r\n        )\r\n    )\r\n\r\n    if (isLoading) return 'Loading...'\r\n\r\n    if (error) return 'An error has occurred: ' + error.message\r\n\r\n    AOS.init({\r\n        duration: 2000\r\n    })\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <section id='aboutspacex'>\r\n                <div className=\"viewaboutspacex\">\r\n                    <div className='container '>\r\n                        <div className='textabout' data-aos=\"fade-up\">\r\n                            <p>About : {data.name}</p>\r\n                            <h6>SpaceX designs, manufactures and launches advanced rockets and spacecraft.</h6>\r\n                            <h6>The company was founded in 2002 to revolutionize space technology,</h6>\r\n                            <h6>with the ultimate goal of enabling people to live on other planets.</h6>\r\n                            <h6>Founded: {data.founded} Founder: {data.founder}</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Section1","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select)) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n            }\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify(_this8.currentQuery);\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","import React from 'react'; // CONTEXT\n\nfunction createValue() {\n  var _isReset = false;\n  return {\n    clearReset: function clearReset() {\n      _isReset = false;\n    },\n    reset: function reset() {\n      _isReset = true;\n    },\n    isReset: function isReset() {\n      return _isReset;\n    }\n  };\n}\n\nvar QueryErrorResetBoundaryContext = /*#__PURE__*/React.createContext(createValue()); // HOOK\n\nexport var useQueryErrorResetBoundary = function useQueryErrorResetBoundary() {\n  return React.useContext(QueryErrorResetBoundaryContext);\n}; // COMPONENT\n\nexport var QueryErrorResetBoundary = function QueryErrorResetBoundary(_ref) {\n  var children = _ref.children;\n  var value = React.useMemo(function () {\n    return createValue();\n  }, []);\n  return /*#__PURE__*/React.createElement(QueryErrorResetBoundaryContext.Provider, {\n    value: value\n  }, typeof children === 'function' ? children(value) : children);\n};","import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var obsRef = React.useRef();\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions);\n  }\n\n  var result = obsRef.current.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = obsRef.current.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    obsRef.current.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw obsRef.current.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result);\n  }\n\n  return result;\n}","import { QueryObserver } from '../core';\nimport { parseQueryArgs } from '../core/utils';\nimport { useBaseQuery } from './useBaseQuery'; // HOOK\n\nexport function useQuery(arg1, arg2, arg3) {\n  var parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  return useBaseQuery(parsedOptions, QueryObserver);\n}"],"sourceRoot":""}